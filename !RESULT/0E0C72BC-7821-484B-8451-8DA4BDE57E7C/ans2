В юникс-подобных ОС приложения запускаются в виде процессов, в каждом процессе могут быть несколько тредов. Треды используют одно общее адресное пространсто и одни и те же дескрипторы (например, для окрытых файлов, т.е. если есть дескриптор номер 10 - то он будет ссылаться на один и тот же объект в каждом из тредов, аналогично для объектов в памяти). В случае с процессами одни и те же адреса и дескрипторы, несмотря на вожможное равенство, могут ссылаться на разные объекты (а могут ссылаться на один и тот же объект - если используются средства для взаимодейстия процессов для работы с общей памятью, или были переданны дескрипторы из одного процесса в другой, или если был открыт один и тот же файл и замаплен на один и тот же дескриптор).
Основная библиотека для работы с тредами - pthread, предоставляет стандартизованные функции и типы данных для работы с тредами для создания, завершения, синхронизации.
Основные состояния процесса в юникс системах - это Running (процесс выполняется), Zombie (процесс завершился, но ПИД процесса ещё освобождён - что устраняет потенциальные рейс-кондишны, когда сигнал может быть доставлен вновь созданному процессу с тем же ПИД-ом, и ресурсы не освобожденны), Interruptible/NonInterruptible (процесс выполняет ввод-вывод, и операция может быть прерванна или нет) Sleep (ожидание), Stopped (остановка - сигстоп или отладка).
Для работы с процессами есть стандартные наборы фунций для взаимодествия - Sys V IPC + средства из стандартной библиотеки языка Си (завершение процесса, например).
Первый процесс в юникс-системах создаётся ядром - это спец. приложение init, согласно его конфигурации это приложение запускает различного рода системные приложения - например, шеллы, сервисы или серверы и т.п.
В уже запущенном приложении можно создать процессы с помощью сис.вызова форк, и выполнить новое приложение с помощью сис.вызовов exec/exece/execve - в этом случае процесс будет замещен новым, с сохранением открытых файлов и ресурсами, ожидать окончание процесса можно с помощью сис. вызовов семейства wait/waitpid, послать сигнал с помощью сис. вызова kill, и завершить процесс, вызвав функцию exit.
Так же в юникс-системах имеется солидных набор различного рода механизмом для взаимодействия между процессами - Sys V IPC, shared memory, sockets, и другие.
